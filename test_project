install.packages("here")
install.packages("readxl")
install.packages("readr")
install.packages("dplyr")
install.packages("magrittr")
install.packages("stringr")
install.packages("purrr")
install.packages("tidyr")
install.packages("forcats")
install.packages("ggplot2")
install.packages("directlabels")
install.packages("ggrepel")
install.packages("broom")
install.packages("patchwork")
install.packages("tidyverse")
install.packages("modelr")
install.packages("plyr")
install.packages("learnr")
install.packages("gradethis")




library(here)
library(readxl)
library(readr)
library(dplyr)
library(magrittr)
library(stringr)
library(purrr)
library(tidyr)
library(forcats)
library(ggplot2)
library(directlabels)
library(ggrepel)
library(broom)
library(patchwork)
library(tidyverse)
library(modelr)
library(plyr)
library(learnr)
library(gradethis)
library(learnr)
library(gradethis)





## Use readxl:: to read excel file as per the directory

CO2_emissions <- readxl::read_xlsx(here("data","raw", "yearly_co2_emissions_1000_tonnes.xlsx"))


save(CO2_emissions,
     file = here::here("data", "raw", "co2_data_imported.rda"))

load(here::here("data","raw", "co2_data_imported.rda"))


## To see the first rows of data use slice_head(n=) function, while we use %>% function from magrittr package to have a sequential steps
## for defining a input for later stages
CO2_emissions %>%
  slice_head(n=3)


## slice_sample function will be used here for selection of random rows.
set.seed(123)
CO2_emissions %>%
  slice_sample(n = 3)


## View the data using glimpse() function of dplyr package
CO2_emissions %>%
  dplyr::glimpse()

## This is the object that is created when we read in the data with readr. A tibble (or tbl_df) is the tidyverse version of a data.frame
## it is a table with variable information arranged as columns, and individual observations arranged as rows.
CO2_emissions %>%
  class()

## Variable country is made up of character aka. "chr"
CO2_emissions %>%
  select(country)

## names returns 192 rows of different country variables and CO2 emission values from(1751 to 2014)
names(CO2_emissions)

## Use pivot_longer function of dplyr package to convert the data into as "long" format or as "narrow" format
## Currently the data is in “wide” format. In wide format, each variable is listed as its own column. 
## In contrast, in long format, variables maybe collapsed into a column that identifies the variables and a column of values. 
## We will have collapse all of the values for the emission data across the different individual year variables into one new Emissions variable. 
## We will identify what year they are from by creating a new Year variable. 
## The cols = argument allows us to specify which columns we want to pivot (or not pivot) to create these new columns. 
## We want to keep our country data as an ID variable so we will exclude it using the - sign, by default all other columns will be used.
## We will have to collapse all of the values for the emission data across different year variables into one new "Emissions" variable
## It will be identified what year are they from by creating a new "year" variable.
## Here we will use "cols=" argument to specify which column name to pivot or un-pivot these new columns.
## country data will be kept as an "ID" variable hence we will exclude using the - sign so that by default all other columns will be used.


CO2_emissions %>%
  pivot_longer(cols = -country,
              names_to = "Year",
              values_to = "Emissions")

set.seed(123)

CO2_emissions %>%
  slice_sample(n = 6)

## Capitalize country variable by using rename() function of dplyr 
## Modify Year to numeric which is currently class type character by using mutate()
## Create a variable called Label which will have to CO2 Emissions (Metric Tons) for every row for plot creation.

CO2_emissions %>% 
  dplyr::rename(Country = country) %>%
  dplyr::mutate(Year = as.numeric(Year),
                Label = "C02 Emissions (Metric Tons)")


set.seed(123)

CO2_emissions %>%
  slice_sample(n = 6)

## Use distinct function to pull unique values of Country

CO2_emissions %>%
  distinct(Country) %>%
  pull()


summary(CO2_emissions)



data_long <- CO2_emissions %>%
  pivot_longer(cols = c(-Country, -Year, -Label),
               names_to = "Indicator",
               values_to = "Value")

set.seed(123)
data_long %>%
  slice_sample(n = 6)

data_long %>%
  mutate(Region = case_when(Country == "India" ~ "India",
                            Country != "India" ~ "Rest of the World"))
data_long %>%
  arrange(Country) %>%
  slice_head(n = 6)

data_long_with_miss_3 <-
  data_long %>%
  arrange(Country)

data_long %<>%
  drop_na() %>%
  arrange(Country)

data_long %>%
  slice_head(n = 6)

data_long %>%
  filter(Indicator == "Emissions")



glimpse(data_long)
colnames(data_long)


ggplot(data=CO2_emissions, aes(x=Year, y=Emissions))+
  geom_point(aes(color=Emissions))

data_long %>%
  filter(Indicator == "Emissions") %>%
  group_by(Year) %>%
  summarize(Emissions = sum(Value))
 
  
data_long %>%
  filter(Indicator == "Emissions") %>%
  group_by(Year) %>%
  summarize(Emissions = sum(Value)) %>%
  ggplot(aes(x = Year, y = Emissions)) +
  geom_line(size = 1.5) +
  labs(title="World" ~CO[2]~ "Emissions per Year (1751-2014)",
       caption = "Limited to reporting countries",
       y = "Emissions(Metric Tonnes)")
